/* His name was Bruce McNair. Copyright 2025 City of Vernonia, Oregon. */
import{__awaiter as e}from"tslib";import{Point as t,SpatialReference as a}from"@arcgis/core/geometry";import{load as s,isLoaded as r,execute as n}from"@arcgis/core/geometry/operators/geodesicBufferOperator";import{execute as o}from"@arcgis/core/geometry/operators/offsetOperator";import{load as c,isLoaded as i,execute as p}from"@arcgis/core/geometry/operators/projectOperator";export const buffer=(t,a,o)=>e(void 0,void 0,void 0,(function*(){return r()||(yield s()),n(t,a,{unit:o})}));export const offset=(t,s,r,n,h)=>e(void 0,void 0,void 0,(function*(){const e=[];let f,l,g;return h&&!i()&&(yield c()),h&&(f=p(t,new a({wkid:h}))),"both"!==s&&"left"!==s||(l=o(f||t,r,{unit:n}),f&&(l=p(l,t.spatialReference))),"both"!==s&&"right"!==s||(g=o(f||t,-r,{unit:n}),f&&(g=p(g,t.spatialReference))),l&&e.push(l),g&&e.push(g),e}));export const distance=(e,t)=>{const{x:a,y:s}=e,{x:r,y:n}=t;return Math.sqrt(Math.pow(Math.abs(a-r),2)+Math.pow(Math.abs(s-n),2))};export const distance3d=(e,t)=>{const{x:a,y:s,z:r}=e,{x:n,y:o,z:c}=t;return Math.sqrt(Math.pow(Math.abs(a-n),2)+Math.pow(Math.abs(s-o),2)+Math.pow(Math.abs((r||0)-(c||0)),2))};export const linearInterpolation=(e,a,s)=>{const{x:r,y:n,spatialReference:o}=e,{x:c,y:i}=a,p=distance(e,a)/s;return new t({x:r+(c-r)/p,y:n+(i-n)/p,spatialReference:o})};export const midpoint=e=>{const{paths:[a],spatialReference:s}=e,r=a.map((e=>{const[t,a]=e;return{x:t,y:a}}));let n=0,o=0;for(let e=0;e<r.length-1;e+=1)n+=distance(new t(Object.assign({},r[e])),new t(Object.assign({},r[e+1])));for(let e=0;e<r.length-1;e+=1){if(o+distance(new t(Object.assign({},r[e])),new t(Object.assign({},r[e+1])))>n/2){const a=n/2-o;return linearInterpolation(new t(Object.assign(Object.assign({},r[e]),{spatialReference:s})),new t(Object.assign(Object.assign({},r[e+1]),{spatialReference:s})),a)}o+=distance(new t(Object.assign({},r[e])),new t(Object.assign({},r[e+1])))}return new t(Object.assign(Object.assign({},r[0]),{spatialReference:s}))};export const polygonVertices=(e,a)=>{const s=[];return e.rings.forEach((e=>{e.forEach(((r,n)=>{n+1<e.length&&s.push(new t({x:r[0],y:r[1],spatialReference:a}))}))})),s};export const polylineVertices=(e,a)=>{const s=[];return e.paths.forEach((e=>{e.forEach((e=>{s.push(new t({x:e[0],y:e[1],spatialReference:a}))}))})),s};export const textAngle=(e,t)=>{const{x:a,y:s}=e,{x:r,y:n}=t;let o=180*Math.atan2(s-n,a-r)/Math.PI;return o=o>0&&o<90?Math.abs(o-180)+180:o>90&&o<180?o=Math.abs(o-180):o<=0&&o>=-90?Math.abs(o):Math.abs(o)+180,o};