/* His name was Bruce McNair. Copyright 2023 City of Vernonia, Oregon. */
import{__awaiter as e}from"tslib";import{XMLParser as o}from"fast-xml-parser";import{Point as r,SpatialReference as t}from"@arcgis/core/geometry";import i from"@arcgis/core/layers/MediaLayer";import n from"@arcgis/core/layers/support/ControlPointsGeoreference";import a from"@arcgis/core/layers/support/ImageElement";import s from"@arcgis/core/Graphic";import{SimpleMarkerSymbol as l}from"@arcgis/core/symbols";import{publish as c}from"pubsub-js";let d=[];const m=e=>{const o=[];for(let r=0;r<e.length;r+=2)o.push(e.slice(r,r+2));return o};export const auxiliaryXmlToControlPoints=i=>e(void 0,void 0,void 0,(function*(){const e=yield(yield fetch(i)).text(),n=(new o).parse(e).PAMDataset.Metadata.find((e=>Object.prototype.hasOwnProperty.call(e,"GeodataXform"))).GeodataXform,a=new t({wkid:n.SpatialReference.WKID}),s=n.SourceGCPs.Double.map((e=>"number"==typeof e?e:parseFloat(e))),l=n.TargetGCPs.Double.map((e=>"number"==typeof e?e:parseFloat(e))),c=m(s),d=m(l);return{controlPoints:c.map(((e,o)=>{const t=d[o];return{mapPoint:new r({x:t[0],y:t[1],spatialReference:a}),sourcePoint:{x:e[0],y:-e[1]}}})),spatialReference:a}}));export const displayControlPoints=(e,o)=>{e.source&&e.source.elements.length&&e.source.elements.getItemAt(0).georeference.controlPoints.forEach((e=>{var r;const t=new s({geometry:null===(r=e.mapPoint)||void 0===r?void 0:r.clone(),symbol:new l({color:"blue",size:9,style:"circle",outline:{color:"white",width:1}})});o.graphics.add(t),d.push(t)}))};export const clearControlPoints=e=>{e.graphics.removeMany(d),d=[]};export default(o,r)=>e(void 0,void 0,void 0,(function*(){const{controlPoints:t,spatialReference:s}=yield auxiliaryXmlToControlPoints(`${o}.aux.xml`),l=yield(yield fetch(o)).blob(),d=yield(o=>e(void 0,void 0,void 0,(function*(){return new Promise(((e,r)=>{const t=new FileReader;t.onload=()=>{e(t.result)},t.onerror=r,t.readAsDataURL(o)}))})))(l),m=yield(p=d,e(void 0,void 0,void 0,(function*(){return new Promise(((e,o)=>{const r=new Image;r.src=p,r.onload=()=>{e(r)},r.onerror=o}))})));var p;const u=new a({image:m,georeference:new n({controlPoints:t,width:m.width,height:m.height})});u.watch("loadError",(o=>e(void 0,void 0,void 0,(function*(){o&&(console.log(o),c("shell-application-alert",{title:"Load error",message:"Failed to load image layer",duration:"fast",kind:"danger"}))}))));return new i(Object.assign(Object.assign({},r),{source:[u],spatialReference:s}))}));