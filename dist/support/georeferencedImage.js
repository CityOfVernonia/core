/* His name was Bruce McNair. Copyright 2025 City of Vernonia, Oregon. */
import{__awaiter as e}from"tslib";import{XMLParser as o}from"fast-xml-parser";import{watch as r}from"@arcgis/core/core/reactiveUtils";import{Point as t,SpatialReference as i}from"@arcgis/core/geometry";import n from"@arcgis/core/layers/MediaLayer";import a from"@arcgis/core/layers/support/ControlPointsGeoreference";import s from"@arcgis/core/layers/support/ImageElement";import c from"@arcgis/core/Graphic";import{SimpleMarkerSymbol as l}from"@arcgis/core/symbols";let m=[];const p=e=>{const o=[];for(let r=0;r<e.length;r+=2)o.push(e.slice(r,r+2));return o};export const auxiliaryXmlToControlPoints=r=>e(void 0,void 0,void 0,(function*(){const e=yield(yield fetch(r)).text(),n=(new o).parse(e).PAMDataset.Metadata.find((e=>Object.prototype.hasOwnProperty.call(e,"GeodataXform"))).GeodataXform,a=new i({wkid:n.SpatialReference.WKID}),s=n.SourceGCPs.Double.map((e=>"number"==typeof e?e:parseFloat(e))),c=n.TargetGCPs.Double.map((e=>"number"==typeof e?e:parseFloat(e))),l=p(s),m=p(c);return{controlPoints:l.map(((e,o)=>{const r=m[o];return{mapPoint:new t({x:r[0],y:r[1],spatialReference:a}),sourcePoint:{x:e[0],y:-e[1]}}})),spatialReference:a}}));export const displayControlPoints=(e,o)=>{if(!e.source)return;e.source.elements.getItemAt(0).georeference.controlPoints.forEach((e=>{var r;const t=new c({geometry:null===(r=e.mapPoint)||void 0===r?void 0:r.clone(),symbol:new l({color:"blue",size:9,style:"circle",outline:{color:"white",width:1}})});o.graphics.add(t),m.push(t)}))};export const clearControlPoints=e=>{e.graphics.removeMany(m),m=[]};export default(o,t)=>e(void 0,void 0,void 0,(function*(){const{controlPoints:i,spatialReference:c}=yield auxiliaryXmlToControlPoints(`${o}.aux.xml`),l=yield(yield fetch(o)).blob(),m=yield(o=>e(void 0,void 0,void 0,(function*(){return new Promise(((e,r)=>{const t=new FileReader;t.onload=()=>{e(t.result)},t.onerror=r,t.readAsDataURL(o)}))})))(l),p=yield(d=m,e(void 0,void 0,void 0,(function*(){return new Promise(((e,o)=>{const r=new Image;r.src=d,r.onload=()=>{e(r)},r.onerror=o}))})));var d;const f=new s({image:p,georeference:new a({controlPoints:i,width:p.width,height:p.height})});r((()=>f.loadError),(e=>{console.log(e)}));return new n(Object.assign(Object.assign({},t),{source:[f],spatialReference:c}))}));