/* His name was Bruce McNair. Copyright 2024 City of Vernonia, Oregon. */
import{__awaiter as e,__decorate as t}from"tslib";import{watch as i}from"@arcgis/core/core/reactiveUtils";import{subclass as a,property as s}from"@arcgis/core/core/accessorSupport/decorators";import n from"@arcgis/core/widgets/Widget";import{tsx as o}from"@arcgis/core/widgets/support/widget";import l from"@arcgis/core/widgets/Sketch/SketchViewModel";import r from"@arcgis/core/views/interactive/snapping/FeatureSnappingLayerSource";import c from"@arcgis/core/layers/GroupLayer";import h from"@arcgis/core/layers/GraphicsLayer";import d from"@arcgis/core/Graphic";import{Point as p,Polyline as m}from"@arcgis/core/geometry";import{CIMSymbol as g,SimpleFillSymbol as y,SimpleMarkerSymbol as b,TextSymbol as u}from"@arcgis/core/symbols";import v from"@arcgis/core/Color";import{geodesicArea as f,geodesicLength as _,simplify as S}from"@arcgis/core/geometry/geometryEngine";import*as w from"@arcgis/core/geometry/coordinateFormatter";import{webMercatorToGeographic as O}from"@arcgis/core/geometry/support/webMercatorUtils";import C from"@arcgis/core/widgets/ElevationProfile";import L from"@arcgis/core/widgets/ElevationProfile/ElevationProfileLineGround";const U="cov-measure",E="cov-measure--content",M="cov-measure--options-content",k="cov-measure--row",j="cov-measure--result",x="cov-measure--color-selector",G="cov-measure--color-selector--color",P="cov-measure--color-selector--color--selected";let $=0;const F="measure_settings_store",V={primary:[237,81,81],secondary:[255,255,255],colors:[[237,81,81],[20,158,206],[167,198,54],[158,85,156],[252,146,31],[255,222,62]]};let A=class extends n{constructor(e){super(e),this.lengthUnit="feet",this.lengthUnits={meters:"Meters",feet:"Feet",kilometers:"Kilometers",miles:"Miles","nautical-miles":"Nautical Miles"},this.areaUnit="acres",this.areaUnits={acres:"Acres","square-feet":"Square Feet","square-meters":"Square Meters","square-kilometers":"Square Kilometers","square-miles":"Square Miles"},this.locationUnit="dec",this.locationUnits={dec:"Decimal Degrees",dms:"Degrees Minutes Seconds"},this.elevationUnit="feet",this.elevationUnits={feet:"Feet",meters:"Meters"},this.labelsVisible=!0,this.labelUnits=!1,this.unitsPrecision=2,this.degreesPrecision=6,this.localeFormat=!0,this.color=V.primary,this.sketch=new l({layer:new h({listMode:"hide",title:"Measure"}),snappingOptions:{enabled:!0,featureEnabled:!0,selfEnabled:!0},updateOnGraphicClick:!1}),this.pointSymbol=new b({style:"circle",size:6,color:V.secondary,outline:{width:1,color:V.primary}}),this.polylineSymbol=new g({data:{type:"CIMSymbolReference",symbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",effects:[{type:"CIMGeometricEffectDashes",dashTemplate:[4.75,4.75],lineDashEnding:"HalfPattern",offsetAlongLine:0}],enable:!0,capStyle:"Butt",joinStyle:"Round",width:2.25,color:[...V.secondary,255]},{type:"CIMSolidStroke",enable:!0,capStyle:"Butt",joinStyle:"Round",width:2.25,color:[...V.primary,255]}]}}}),this.polygonSymbol=new y({color:[...V.primary,.125],outline:{width:0}}),this.textSymbol=new u({color:V.primary,haloColor:V.secondary,haloSize:2,horizontalAlignment:"center",verticalAlignment:"middle",font:{size:10}}),this.elevationProfile=new C({unit:"feet",visibleElements:{legend:!1,chart:!0,clearButton:!1,settingsButton:!1,sketchButton:!1,selectButton:!1,uniformChartScalingToggle:!1}}),this.elevationProfileLineGround=new L,this.layers=new c({listMode:"hide",title:"Measure Layers"}),this.labels=new h({listMode:"hide",title:"Measure Labels"}),this.state={operation:"ready",x:0,y:0,z:0,length:0,area:0,locationX:0,locationY:0,elevation:0,lengthGeometry:null,areaGeometry:null,locationGeometry:null,elevationGeometry:null,profileGeometry:null},this.optionsVisible=!1,this._sketchHandle=null,this._loadSettings()}postInitialize(){return e(this,void 0,void 0,(function*(){const{view:t,sketch:a,pointSymbol:s,polylineSymbol:n,polygonSymbol:o,elevationProfile:l,elevationProfileLineGround:r,layers:c,labels:h,labelsVisible:d}=this;yield t.when(),a.view=t,a.activeLineSymbol=n,a.activeVertexSymbol=s,a.vertexSymbol=s,a.activeFillSymbol=o,t.map.layers.forEach(this._addSnappingLayer.bind(this));const p=t.map.layers.on("after-add",(e=>{this._addSnappingLayer(e.item),t.map.layers.reorder(c,t.map.layers.length-1)}));h.visible=d,c.addMany([a.layer,h]),t.map.add(c),w.load(),l.view=t,l.profiles.removeAll(),r.color=new v(this.color),l.profiles.add(r);const m=t.on("pointer-move",(e=>{const{x:i,y:a}=this._location(t.toMap(e));this.state=Object.assign(Object.assign({},this.state),{x:i,y:a})})),g=t.on("pointer-move",(e=>{const{state:{operation:i}}=this;"measure-location"===i&&this._addLabels(t.toMap(e),h)})),y=t.on("pointer-move",(i=>e(this,void 0,void 0,(function*(){t.map.ground||(this.state=Object.assign(Object.assign({},this.state),{z:-99999}));const e=yield this._elevation(t.toMap(i));this.state=Object.assign(Object.assign({},this.state),{z:e})})))),b=t.on("pointer-move",(e=>{const{state:{operation:i}}=this;"measure-elevation"===i&&this._addLabels(t.toMap(e),h)})),u=i((()=>this.lengthUnit),this._unitsChange.bind(this)),f=i((()=>this.areaUnit),this._unitsChange.bind(this)),_=i((()=>this.locationUnit),this._unitsChange.bind(this)),S=i((()=>this.elevationUnit),this._unitsChange.bind(this)),O=i((()=>this.labelUnits),this._updateSettings.bind(this)),C=i((()=>this.localeFormat),this._updateSettings.bind(this)),L=i((()=>a.snappingOptions.enabled),this._updateSettings.bind(this)),U=i((()=>l.viewModel.uniformChartScaling),this._updateSettings.bind(this)),E=i((()=>this.labelsVisible),(e=>{h.visible=e,this._updateSettings()})),M=i((()=>this.color),(e=>{this._setColors(e),this._updateSettings()}));this.addHandles([p,m,g,y,b,u,f,_,S,O,C,L,U,E,M])}))}onHide(){this._reset(),this.optionsVisible=!1}_unitsChange(){return e(this,void 0,void 0,(function*(){const{state:{operation:e,lengthGeometry:t,areaGeometry:i,locationGeometry:a,elevationGeometry:s},elevationProfile:n}=this;if(t&&this._length(t),"length"===e&&t&&this._addLabels(t),i&&this._area(i),"area"===e&&i&&this._addLabels(i),a){const{x:e,y:t}=this._location(a);this.state=Object.assign(Object.assign({},this.state),{locationX:e,locationY:t})}if("location"===e&&a&&this._addLabels(a),s){const e=yield this._elevation(s);this.state=Object.assign(Object.assign({},this.state),{z:e,elevation:e})}"elevation"===e&&s&&this._addLabels(s),n.unit=this.elevationUnit}))}_loadSettings(){const{sketch:{snappingOptions:e},elevationProfile:{viewModel:t}}=this,i=localStorage.getItem(F),a=i?JSON.parse(i):null;if(a){const{snapping:i,labels:s,labelUnits:n,localeFormat:o,uniformChartScaling:l,color:r}=a;e.enabled=i,this.labelsVisible=s,this.labelUnits=n,this.localeFormat=o,t.uniformChartScaling=l,this.color=r,this._setColors(r)}else this._updateSettings()}_updateSettings(){const{sketch:{snappingOptions:e},elevationProfile:{viewModel:t}}=this;localStorage.setItem(F,JSON.stringify({snapping:e.enabled,labels:this.labelsVisible,labelUnits:this.labelUnits,localeFormat:this.localeFormat,uniformChartScaling:t.uniformChartScaling,color:this.color}))}_setColors(e){const{pointSymbol:t,polylineSymbol:i,polygonSymbol:a,textSymbol:s,elevationProfileLineGround:n}=this;t.outline.color=new v(e),i.data.symbol.symbolLayers[1].color=[...e,255],a.color=new v([...e,.125]),s.color=new v(e),n.color=new v(e)}_addSnappingLayer(e){const{sketch:{snappingOptions:t}}=this;"group"!==e.type?("hide"!==e.listMode&&void 0!==e.title&&null!==e.title||e.id.includes("markup"))&&!0!==e.internal&&t.featureSources.add(new r({layer:e})):e.layers.forEach((e=>{this._addSnappingLayer(e)}))}_reset(){var e;const{sketch:t,sketch:{layer:i},labels:a,elevationProfile:s}=this;null===(e=this._sketchHandle)||void 0===e||e.remove(),this._sketchHandle=null,t.cancel(),i.removeAll(),a.removeAll(),s.viewModel.clear(),this.state=Object.assign(Object.assign({},this.state),{operation:"ready",length:0,area:0})}_round(e,t){return Number(e.toFixed(t))}_format(e,t,i){const{labelUnits:a,localeFormat:s}=this,n=s?e.toLocaleString():e,o=t.replace("-"," ").replace("square","sq");return!0===i&&!1===a?`${n}`:`${n} ${o}`}_unitChangeEvent(e,t){t.addEventListener("calciteSelectChange",(()=>{this[`${e}Unit`]=t.selectedOption.value}))}_measureEvent(e,t){t.addEventListener("click",this._measure.bind(this,e))}_clearEvent(e){e.addEventListener("click",this._reset.bind(this))}_measure(e){const{sketch:t}=this;this._reset(),this.state=Object.assign(Object.assign({},this.state),{operation:`measure-${e}`}),this._sketchHandle=t.on("create",this[`_${e}Event`].bind(this)),t.create("length"===e||"profile"===e?"polyline":"area"===e?"polygon":"point")}_lengthEvent(e){const{sketch:{layer:t}}=this,{state:i,graphic:a,graphic:{geometry:s}}=e;"cancel"!==i&&a?(this._length(s),"complete"===i&&(this.state=Object.assign(Object.assign({},this.state),{operation:"length",lengthGeometry:s}),this._addGraphics(s)),this._addLabels(s,a.layer===t?void 0:a.layer)):this._reset()}_length(e){const{unitsPrecision:t,lengthUnit:i}=this;let a=_(e,i);a<0&&(a=_(S(e),i)),a=this._round(a,t),this.state=Object.assign(Object.assign({},this.state),{length:a,lengthGeometry:e})}_areaEvent(e){const{sketch:{layer:t}}=this,{state:i,graphic:a,graphic:{geometry:s}}=e;"cancel"!==i&&a?(this._area(s),"complete"===i?(this.state=Object.assign(Object.assign({},this.state),{operation:"area",areaGeometry:s}),this._addGraphics(s)):this._addPolygonOutline(s,a.layer),this._addLabels(s,a.layer===t?void 0:a.layer)):this._reset()}_area(e){const{unitsPrecision:t,lengthUnit:i,areaUnit:a}=this;let s=_(e,i);s<0&&(s=_(S(e),i)),s=this._round(s,t);let n=f(e,a);n<0&&(n=f(S(e),a)),n=this._round(n,t),this.state=Object.assign(Object.assign({},this.state),{length:s,area:n,areaGeometry:e})}_locationEvent(e){const{sketch:{layer:t}}=this,{state:i,graphic:a,graphic:{geometry:s}}=e;if("cancel"!==i&&a){if("complete"===i){const{x:e,y:t}=this._location(s);this.state=Object.assign(Object.assign({},this.state),{operation:"location",locationX:e,locationY:t,locationGeometry:s})}this._addLabels(s,a.layer===t?void 0:a.layer)}else this._reset()}_location(e){const{degreesPrecision:t,locationUnit:i}=this;let a=this._round(e.longitude,t),s=this._round(e.latitude,t);if("dms"===i){const t=w.toLatitudeLongitude(O(e,!1),"dms",2),i=-1!==t.indexOf("N")?t.indexOf("N"):t.indexOf("S");s=t.substring(0,i+1),a=t.substring(i+2,t.length)}return{x:a,y:s}}_elevationEvent(t){return e(this,void 0,void 0,(function*(){const{sketch:{layer:e}}=this,{state:i,graphic:a,graphic:{geometry:s}}=t;if("cancel"!==i&&a){if("complete"===i){const e=yield this._elevation(s);this.state=Object.assign(Object.assign({},this.state),{operation:"elevation",elevation:e,elevationGeometry:s}),this._addLabels(s)}this._addLabels(s,a.layer===e?void 0:a.layer)}else this._reset()}))}_elevation(e){return new Promise((t=>{const{view:{map:{ground:i}},unitsPrecision:a,elevationUnit:s}=this;i.queryElevation(e).then((e=>{t(this._round(e.geometry.z*("feet"===s?3.2808399:1),a))})).catch((()=>{t(-99999)}))}))}_profileEvent(t){return e(this,void 0,void 0,(function*(){const{elevationProfile:e}=this,{state:i,graphic:a,graphic:{geometry:s}}=t;"cancel"!==i&&a?"complete"===i&&(e.input=new d({geometry:s}),this.state=Object.assign(Object.assign({},this.state),{operation:"profile",profileGeometry:s}),this._addGraphics(s)):this._reset()}))}_addGraphics(e){const{view:{spatialReference:t},sketch:{layer:i},pointSymbol:a,polylineSymbol:s}=this,{type:n}=e;if("polygon"===n&&i.add(new d({geometry:e,symbol:s})),"polyline"===n||"polygon"==n){const s="polyline"===n?e.paths[0]:e.rings[0];i.addMany(s.map((e=>{const[i,s]=e;return new d({geometry:new p({x:i,y:s,spatialReference:t}),symbol:a})})))}}_addPolygonOutline(e,t){const{polylineSymbol:i}=this,{graphics:a}=t;t.removeMany(a.filter((e=>e.attributes&&!0===e.attributes.outline)).toArray()),a.add(new d({geometry:e,attributes:{outline:!0},symbol:i}),1)}_addLabels(e,t){const{labelsVisible:i,labels:a,state:{operation:s,area:n,x:o,y:l,z:r,locationX:c,locationY:h,elevation:p},areaUnit:m,elevationUnit:g}=this,{type:y}=e;a.removeAll(),t&&t.removeMany(t.graphics.filter((e=>e.symbol&&"text"===e.symbol.type)).toArray()),("measure-length"===s||"measure-profile"===s)&&"polyline"===y&&t&&i&&t.addMany(this._polylineLabels(e)),"length"!==s&&"profile"!==s||"polyline"!==y||a.addMany(this._polylineLabels(e)),"measure-area"===s&&"polygon"===y&&n>0&&t&&i&&(t.add(new d({geometry:e.centroid,symbol:this._createTextSymbol(this._format(n,m,!0))})),t.addMany(this._polylineLabels(e))),"area"===s&&"polygon"===y&&(a.add(new d({geometry:e.centroid,symbol:this._createTextSymbol(this._format(n,m,!0))})),a.addMany(this._polylineLabels(e))),"measure-location"===s&&"point"===y&&t&&i&&t.add(new d({geometry:e,symbol:this._createTextSymbol(`${l}\n${o}`,!0)})),"location"===s&&"point"===y&&a.add(new d({geometry:e,symbol:this._createTextSymbol(`${h}\n${c}`,!0)})),"elevation"===s&&"point"===y&&a.add(new d({geometry:e,symbol:this._createTextSymbol(this._format(p,g,!0),!0)})),"measure-elevation"===s&&"point"===y&&t&&i&&t.add(new d({geometry:e,symbol:this._createTextSymbol(this._format(r,g,!0),!0)}))}_createTextSymbol(e,t,i){const{textSymbol:a}=this,s=a.clone();return s.text=e,t&&(s.horizontalAlignment="left",s.xoffset=8),i&&(s.angle=i),s}_polylineLabels(e){const{lengthUnit:t}=this,i="polyline"===e.type?e.paths[0]:e.rings[0],a=[];return i.forEach(((i,s,n)=>{const o=n[s],l=n[s+1];if(!o||!l)return;const r=new m({paths:[[o,l]],spatialReference:e.spatialReference});let c=_(r,t);c<0&&(c=_(S(r),t)),c=this._round(c,2),a.push(new d({geometry:this._midpoint(r),symbol:this._createTextSymbol(this._format(c,t,!0),void 0,this._textSymbolAngle(o[0],o[1],l[0],l[1]))}))})),a}_midpoint(e){const{paths:[t],spatialReference:i}=e,a=(e,t)=>{const{x:i,y:a}=e,{x:s,y:n}=t;return Math.sqrt(Math.pow(Math.abs(i-s),2)+Math.pow(Math.abs(a-n),2))},s=(e,t,i)=>{const{x:s,y:n,spatialReference:o}=e,{x:l,y:r}=t,c=a(e,t)/i;return new p({x:s+(l-s)/c,y:n+(r-n)/c,spatialReference:o})},n=t.map((e=>{const[t,i]=e;return{x:t,y:i}}));let o=0,l=0;for(let e=0;e<n.length-1;e+=1)o+=a(new p(Object.assign({},n[e])),new p(Object.assign({},n[e+1])));for(let e=0;e<n.length-1;e+=1){if(l+a(new p(Object.assign({},n[e])),new p(Object.assign({},n[e+1])))>o/2){const t=o/2-l;return s(new p(Object.assign(Object.assign({},n[e]),{spatialReference:i})),new p(Object.assign(Object.assign({},n[e+1]),{spatialReference:i})),t)}l+=a(new p(Object.assign({},n[e])),new p(Object.assign({},n[e+1])))}return new p(Object.assign(Object.assign({},n[0]),{spatialReference:i}))}_textSymbolAngle(e,t,i,a){let s=180*Math.atan2(t-a,e-i)/Math.PI;return s=s>0&&s<90?Math.abs(s-180)+180:s>90&&s<180?s=Math.abs(s-180):s<=0&&s>=-90?Math.abs(s):Math.abs(s)+180,s}render(){const{id:e,view:{scale:t},optionsVisible:i,state:a,state:{operation:s,x:n,y:l,locationX:r,locationY:c},unitsPrecision:h,lengthUnit:d,areaUnit:p,elevationUnit:m,elevationProfile:{viewModel:{state:g,uniformChartScaling:y}},localeFormat:b}=this,u=this.elevationProfile.viewModel.statistics||null,v=`Length: ${this._format(a.length,d)}`,f=`Area: ${this._format(a.area,p)}`,_=v.replace("Length: ","Perimeter: "),S=`Latitude: ${"location"===s?c:l}`,w=`Longitude: ${"location"===s?r:n}`,O=`Elevation: ${"elevation"===s?a.elevation.toLocaleString():a.z.toLocaleString()} ${m}`,C=`Latitude: ${l}`,L=`Longitude: ${n}`,x=`Elevation: ${a.z.toLocaleString()} ${m}`,G=!("length"===s||"measure-length"===s),P=!("area"===s||"measure-area"===s),F=!("location"===s||"measure-location"===s),V=!("elevation"===s||"measure-elevation"===s),A="profile"!==s&&"created"!==g,z="ready"===s,R="measure-length"===s||"measure-area"===s||"measure-location"===s||"measure-elevation"===s||"measure-profile"===s?"Cancel":"Clear",q=[0,1,2,3,4,5].map((t=>`tooltip_${e}_${t}_${$++}`));return o("calcite-panel",{class:U,heading:"Measure"},o("calcite-action",{id:q[0],slot:"header-actions-end",icon:i?"x":"gear",afterCreate:e=>{e.addEventListener("click",(()=>{this.optionsVisible=!this.optionsVisible}))}}),o("calcite-tooltip",{"reference-element":q[0],placement:"bottom","close-on-click":""},i?"Close":"Options"),o("div",{class:E,hidden:i},o("div",{class:k},o("calcite-button",{id:q[1],appearance:"transparent","icon-start":"measure-line",afterCreate:this._measureEvent.bind(this,"length")}),o("calcite-tooltip",{"reference-element":q[1],placement:"bottom","close-on-click":""},"Length"),o("calcite-button",{id:q[2],appearance:"transparent","icon-start":"measure-area",afterCreate:this._measureEvent.bind(this,"area")}),o("calcite-tooltip",{"reference-element":q[2],placement:"bottom","close-on-click":""},"Area"),o("calcite-button",{id:q[3],appearance:"transparent","icon-start":"point",afterCreate:this._measureEvent.bind(this,"location")}),o("calcite-tooltip",{"reference-element":q[3],placement:"bottom","close-on-click":""},"Location"),o("calcite-button",{id:q[4],appearance:"transparent","icon-start":"altitude",afterCreate:this._measureEvent.bind(this,"elevation")}),o("calcite-tooltip",{"reference-element":q[4],placement:"bottom","close-on-click":""},"Elevation"),o("calcite-button",{id:q[5],appearance:"transparent","icon-start":"graph-time-series",afterCreate:this._measureEvent.bind(this,"profile")}),o("calcite-tooltip",{"reference-element":q[5],placement:"bottom","close-on-click":""},"Profile")),o("div",{class:j,hidden:!z},o("span",null,C),o("span",null,L),o("span",null,x),o("span",null,"Scale: 1:",b?Math.round(t).toLocaleString():Math.round(t))),o("calcite-select",{hidden:G,afterCreate:this._unitChangeEvent.bind(this,"length")},this._renderUnitOptions(this.lengthUnits,this.lengthUnit)),o("div",{class:j,hidden:G},o("span",null,v)),o("div",{class:k,hidden:P},o("calcite-select",{afterCreate:this._unitChangeEvent.bind(this,"area")},this._renderUnitOptions(this.areaUnits,this.areaUnit)),o("calcite-select",{afterCreate:this._unitChangeEvent.bind(this,"length")},this._renderUnitOptions(this.lengthUnits,this.lengthUnit))),o("div",{class:j,hidden:P},o("span",null,f),o("span",null,_)),o("calcite-select",{hidden:F,afterCreate:this._unitChangeEvent.bind(this,"location")},this._renderUnitOptions(this.locationUnits,this.locationUnit)),o("div",{class:j,hidden:F},o("span",null,S),o("span",null,w)),o("calcite-select",{hidden:V,afterCreate:this._unitChangeEvent.bind(this,"elevation")},this._renderUnitOptions(this.elevationUnits,this.elevationUnit)),o("div",{class:j,hidden:V},O),o("calcite-select",{hidden:A,afterCreate:this._unitChangeEvent.bind(this,"elevation")},this._renderUnitOptions(this.elevationUnits,this.elevationUnit)),o("div",{hidden:A,afterCreate:e=>{this.elevationProfile.container=e}}),o("div",{class:j,hidden:A},o("calcite-label",{alignment:"start",layout:"inline-space-between"},"Uniform profile scale",o("calcite-switch",{afterCreate:e=>{e.checked=y,e.addEventListener("calciteSwitchChange",(()=>{this.elevationProfile.viewModel.uniformChartScaling=e.checked}))}})),o("span",null,"Min elevation:"," ",u?this._format(this._round(u.minElevation,h),m):""),o("span",null,"Max elevation:"," ",u?this._format(this._round(u.maxElevation,h),m):""),o("span",null,"Avg elevation:"," ",u?this._format(this._round(u.avgElevation,h),m):""),o("span",null,"Elevation gain:"," ",u?this._format(this._round(u.elevationGain,h),m):""),o("span",null,"Elevation loss:"," ",u?this._format(this._round(u.elevationLoss,h),m):"")),o("span",{hidden:z},o("calcite-button",{afterCreate:this._clearEvent.bind(this)},R))),o("div",{class:M,hidden:!i},o("calcite-label",{alignment:"start",layout:"inline-space-between"},"Feature snapping",o("calcite-switch",{afterCreate:e=>{const{sketch:{snappingOptions:t}}=this;e.checked=t.featureEnabled,e.addEventListener("calciteSwitchChange",(()=>{t.featureEnabled=e.checked}))}})),o("calcite-label",{alignment:"start",layout:"inline-space-between"},"Sketch guides",o("calcite-switch",{afterCreate:e=>{const{sketch:{snappingOptions:t}}=this;e.checked=t.selfEnabled,e.addEventListener("calciteSwitchChange",(()=>{t.selfEnabled=e.checked}))}})),o("calcite-label",{alignment:"start",layout:"inline-space-between"},"Graphic labels",o("calcite-switch",{afterCreate:e=>{const{labelsVisible:t}=this;e.checked=t,e.addEventListener("calciteSwitchChange",(()=>{this.labelsVisible=e.checked}))}})),o("calcite-label",{alignment:"start",layout:"inline-space-between"},"Graphic label units",o("calcite-switch",{afterCreate:e=>{const{labelUnits:t}=this;e.checked=t,e.addEventListener("calciteSwitchChange",(()=>{this.labelUnits=e.checked}))}})),o("calcite-label",{alignment:"start",layout:"inline-space-between"},"Format results",o("calcite-switch",{afterCreate:e=>{const{localeFormat:t}=this;e.checked=t,e.addEventListener("calciteSwitchChange",(()=>{this.localeFormat=e.checked}))}})),o("calcite-label",null,"Color",this._renderColorSelector())))}_renderUnitOptions(e,t){const i=[];for(const a in e)i.push(o("calcite-option",{key:$++,label:e[a],value:a,selected:a===t}));return i}_renderColorSelector(){const{colors:e}=V,{color:t}=this;return o("div",{class:x},e.map((e=>{const i=e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2];return o("div",{class:this.classes(G,i?P:""),style:`background-color: rgba(${e[0]}, ${e[1]}, ${e[2]}, 1);`,afterCreate:t=>{t.addEventListener("click",(()=>{this.color=e}))}})})))}};t([s()],A.prototype,"lengthUnit",void 0),t([s()],A.prototype,"areaUnit",void 0),t([s()],A.prototype,"locationUnit",void 0),t([s()],A.prototype,"elevationUnit",void 0),t([s()],A.prototype,"labelsVisible",void 0),t([s()],A.prototype,"labelUnits",void 0),t([s()],A.prototype,"localeFormat",void 0),t([s()],A.prototype,"color",void 0),t([s({aliasOf:"sketch.pointSymbol"})],A.prototype,"pointSymbol",void 0),t([s({aliasOf:"sketch.polylineSymbol"})],A.prototype,"polylineSymbol",void 0),t([s({aliasOf:"sketch.polygonSymbol"})],A.prototype,"polygonSymbol",void 0),t([s()],A.prototype,"state",void 0),t([s()],A.prototype,"optionsVisible",void 0),A=t([a("cov.widgets.Measure")],A);export default A;