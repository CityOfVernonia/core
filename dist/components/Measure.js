/* His name was Bruce McNair. Copyright 2025 City of Vernonia, Oregon. */
import{__awaiter as t,__decorate as e}from"tslib";import{watch as i}from"@arcgis/core/core/reactiveUtils";import{property as o,subclass as s}from"@arcgis/core/core/accessorSupport/decorators";import r from"@arcgis/core/widgets/Widget";import{tsx as n}from"@arcgis/core/widgets/support/widget";import{isLoaded as a,load as l,toLatitudeLongitude as c}from"@arcgis/core/geometry/coordinateFormatter";import{isLoaded as d,load as h,execute as u}from"@arcgis/core/geometry/operators/geodeticAreaOperator";import{isLoaded as p,load as g,execute as _}from"@arcgis/core/geometry/operators/geodeticLengthOperator";import{execute as m}from"@arcgis/core/geometry/operators/simplifyOperator";import{midpoint as b,textAngle as y}from"./../support/geometryUtils";import v from"@arcgis/core/Graphic";import f from"@arcgis/core/geometry/Point";import w from"@arcgis/core/geometry/Polyline";import x from"./Measure/Sketch";import C,{FEET_IN_METERS as k}from"../support/Units";import S from"./UnitsDropdown";import{referenceElement as U}from"./support";const G="cov--measure",L={buttons:`${G}_buttons`,options:`${G}_options`,results:`${G}_results`},$="measure-cursor",E="measure-sketch";let D=0;const O={areaGeometry:null,coordinatesGeometry:new f({latitude:0,longitude:0}),elevationGeometry:new f({hasZ:!0,latitude:0,longitude:0,z:0}),lengthGeometry:null,operation:"cursor"};let A=class extends r{constructor(t){super(t),this._cursor=new f({hasZ:!0,latitude:0,longitude:0,z:0}),this._cursorAbortController=null,this._state=Object.assign(Object.assign({},O),{status:"loading"}),this._units=new C,this._sketch=new x,this._labels={add:t=>{const{_sketch:e,_sketch:{labels:i},_state:{operation:o}}=this;if(e.clearGraphics("labels"),"area"===o&&"polygon"===t.type&&i.addMany([...this._labels.length(t),this._labels.area(t)]),"length"===o&&"polyline"===t.type&&i.addMany(this._labels.length(t)),"coordinates"===o&&"point"===t.type){const{latitude:e,longitude:o}=this._formatters.coordinates(t);i.add(new v({geometry:t,symbol:this._labels.textSymbol({pointLabel:!0,text:`${e}\n${o}`})}))}if("elevation"===o&&"point"===t.type){const{_cursor:e,_units:{elevationUnit:o}}=this;let s=e.z||0;"feet"===o&&(s*=k),i.add(new v({geometry:t,symbol:this._labels.textSymbol({pointLabel:!0,text:`${s.toFixed(2)}`})}))}},area:t=>{const{_units:{areaUnit:e}}=this,i=new v;if(t.rings[0].length<4)return i;i.geometry=t.centroid;let o=u(t,{curveType:"geodesic",unit:e});return o<0&&(o=u(m(t),{curveType:"geodesic",unit:e})),i.symbol=this._labels.textSymbol({text:o.toFixed(2)}),i},length:t=>{const{_units:{lengthUnit:e}}=this,i=[];return("polyline"===t.type?t.paths[0]:t.rings[0]).forEach((o,s,r)=>{const n=r[s],a=r[s+1];if(!n||!a)return;const l=new w({paths:[[n,a]],spatialReference:t.spatialReference});let c=_(l,{curveType:"geodesic",unit:e});c<0&&(c=_(m(t),{curveType:"geodesic",unit:e})),i.push(new v({geometry:b(l),symbol:this._labels.textSymbol({angle:y({x:n[0],y:n[1]},{x:a[0],y:a[1]}),text:c.toFixed(2)})}))}),i},textSymbol:t=>{const{_sketch:{textSymbol:e}}=this,{angle:i,pointLabel:o,text:s}=t,r=e.clone();return r.text=s,o&&(r.horizontalAlignment="left",r.xoffset=8),i&&(r.angle=i),r}},this._formatters={area:t=>{const{_units:e,_units:{areaUnit:i}}=this,o=e.getUnitLabel("area",i);if(!t)return`0 ${o}`;let s=0;return s=u(t,{curveType:"geodesic",unit:i}),s<0&&(s=u(m(t),{curveType:"geodesic",unit:i})),`${Number(s.toFixed(2)).toLocaleString()} ${o}`},coordinates:t=>{const{_units:{coordinatesUnit:e}}=this;if(!t)return{latitude:0,longitude:0};let i=(t=t.clone()).latitude||0,o=t.longitude||0;if("decimal"===e&&(i=Number(i.toFixed(6)),o=Number(o.toFixed(6))),"dms"===e){const e=c(t,"dms",2);if(!e)return{latitude:i,longitude:o};const s=-1!==e.indexOf("N")?e.indexOf("N"):e.indexOf("S"),r=e.substring(0,s+1).split(" ");i=`${r[0]}°${r[1]}'${r[2].slice(0,r[2].length-1)+'" '+r[2].slice(r[2].length-1)}`;const n=e.substring(s+2,e.length).split(" ");o=`${n[0]}°${n[1]}'${n[2].slice(0,n[2].length-1)+'" '+n[2].slice(n[2].length-1)}`}return{latitude:i,longitude:o}},elevation:t=>{const{_units:{elevationUnit:e},_units:i}=this,o=i.getUnitLabel("elevation",e);if(!t)return`0 ${o}`;let s=(t=t.clone()).z;return s?("feet"===e&&(s*=k),`${Number(s.toFixed(2)).toLocaleString()} ${o}`):`0 ${o}`},length:t=>{const{_units:e,_units:{lengthUnit:i}}=this,o=e.getUnitLabel("length",i);if(!t)return`0 ${o}`;let s=0;return s=_(t,{curveType:"geodesic",unit:i}),s<0&&(s=_(m(t),{curveType:"geodesic",unit:i})),`${Number(s.toFixed(2)).toLocaleString()} ${o}`}}}postInitialize(){return t(this,void 0,void 0,function*(){const{view:t,_sketch:e,_units:o}=this;yield t.when(),e.view=t,this.addHandles([i(()=>this.visible,t=>{t?this._cursorEvents():(this.removeHandles($),this._reset())}),i(()=>o.areaUnit,this._unitsChanged.bind(this)),i(()=>o.coordinatesUnit,this._unitsChanged.bind(this)),i(()=>o.elevationUnit,this._unitsChanged.bind(this)),i(()=>o.lengthUnit,this._unitsChanged.bind(this))]),a()||(yield l())})}_areaEvent(t){const{state:e,graphic:i,graphic:{geometry:o}}=t;"cancel"!==e&&i&&"polygon"===(null==o?void 0:o.type)?(this._setState({areaGeometry:o}),this._labels.add(o)):this._reset()}_coordinatesEvent(t){const{_cursor:e,_state:{coordinatesGeometry:i}}=this,{state:o}=t;"cancel"!==o?"complete"===o&&(this._setState({coordinatesGeometry:e.clone()}),i&&this._labels.add(i)):this._reset()}_cursorEvents(){const{view:e,_cursor:i,_ground:o}=this;this.addHandles([e.on("pointer-move",s=>t(this,void 0,void 0,function*(){const{_cursorAbortController:t,_sketch:{state:r},_state:{operation:n}}=this;if("area"===n||"length"===n)return;const a=e.toMap(s);if(i.latitude=a.latitude,i.longitude=a.longitude,"coordinates"===n&&"active"===r){const t=i.clone();this._setState({coordinatesGeometry:t}),this._labels.add(t)}t&&(t.abort(),this._cursorAbortController=null);const l=new AbortController;this._cursorAbortController=l;try{const{geometry:t}=yield o.queryElevation(a,{signal:l.signal});if(this._cursorAbortController!==l)return;this._cursorAbortController=null;const e=t.z;if(i.z=e,"elevation"===n&&"active"===r){const t=i.clone();this._setState({elevationGeometry:t}),this._labels.add(t)}}catch(t){this._cursorAbortController=null,t instanceof Error&&"Aborted"!==t.message&&console.log("elevation query error",t)}}))],$)}_elevationEvent(t){const{_cursor:e}=this,{state:i}=t;"cancel"!==i?"complete"===i&&this._setState({elevationGeometry:e.clone()}):this._reset()}_lengthEvent(t){const{state:e,graphic:i,graphic:{geometry:o}}=t;"cancel"!==e&&i&&"polyline"===(null==o?void 0:o.type)?(this._setState({lengthGeometry:o}),this._labels.add(o)):this._reset()}_measure(e){return t(this,void 0,void 0,function*(){const{view:t,_sketch:i}=this;this._reset(),t.closePopup(),"area"!==e||d()||(yield h(),p()||(yield g())),"length"!==e||p()||(yield g()),this._setState({operation:e}),this.addHandles(i.on("create",this[`_${e}Event`].bind(this)),E),i.create("length"===e?"polyline":"area"===e?"polygon":"point")})}_reset(){const{_sketch:t}=this;this.removeHandles(E),t.cancel(),t.clearGraphics("all"),this._setState(O)}_setState(t){this._state=Object.assign(Object.assign({},this._state),t)}_unitsChanged(){const{_state:{areaGeometry:t,coordinatesGeometry:e,elevationGeometry:i,lengthGeometry:o,operation:s}}=this;"area"===s&&t&&this._labels.add(t),"length"===s&&o&&this._labels.add(o),"coordinates"===s&&e&&this._labels.add(e),"elevation"===s&&i&&this._labels.add(i)}render(){const{_sketch:{snappingOptions:{featureEnabled:t,selfEnabled:e}},_state:{operation:i}}=this;return n("calcite-panel",{class:G,heading:"Measure"},n("calcite-action",{icon:"gear",slot:"header-actions-end",text:"Options"},n("calcite-tooltip",{"close-on-click":"",placement:"bottom",slot:"tooltip"},"Options")),n("calcite-popover",{"auto-close":"",closable:!0,heading:"Options","overlay-positioning":"fixed",placement:"bottom-end",scale:"s",afterCreate:U.bind(this)},n("div",{class:L.options},n("calcite-label",{layout:"inline"},n("calcite-switch",{checked:t,afterCreate:t=>{t.addEventListener("calciteSwitchChange",()=>{this._sketch.snappingOptions.featureEnabled=t.checked})}}),"Snapping"),n("calcite-label",{layout:"inline",style:"--calcite-label-margin-bottom: 0;"},n("calcite-switch",{checked:e,afterCreate:t=>{t.addEventListener("calciteSwitchChange",()=>{this._sketch.snappingOptions.selfEnabled=t.checked})}}),"Guides"))),n("div",{class:L.buttons},n("calcite-button",{"icon-start":"measure-line",onclick:this._measure.bind(this,"length")}),n("calcite-button",{"icon-start":"measure-area",onclick:this._measure.bind(this,"area")}),n("calcite-button",{"icon-start":"point",onclick:this._measure.bind(this,"coordinates")}),n("calcite-button",{"icon-start":"altitude",onclick:this._measure.bind(this,"elevation")})),"cursor"===i?this._renderCursor():"area"===i?this._renderArea():"coordinates"===i?this._renderCoordinates():"elevation"===i?this._renderElevation():"length"===i?this._renderLength():null,this._renderCancelClearButton())}_renderArea(){const{_state:{areaGeometry:t}}=this;return n("div",{class:L.results,key:D++},n("div",null,n("calcite-dropdown",{afterCreate:this._renderUnitsDropDown.bind(this,"area","Area")}),":"," ",this._formatters.area(t)),n("hr",null),n("div",null,n("calcite-dropdown",{afterCreate:this._renderUnitsDropDown.bind(this,"length","Perimeter")}),": ",this._formatters.length(t)))}_renderCancelClearButton(){const{_sketch:{state:t},_state:{operation:e}}=this;return"cursor"===e?null:n("calcite-button",{appearance:"outline",key:D++,slot:"footer",width:"full",onclick:this._reset.bind(this)},"active"===t?"Cancel":"Clear")}_renderCoordinates(){const{_state:{coordinatesGeometry:t}}=this,{latitude:e,longitude:i}=this._formatters.coordinates(t);return n("div",{class:L.results,key:D++},n("div",null,n("calcite-dropdown",{afterCreate:this._renderUnitsDropDown.bind(this,"coordinates","Latitude")}),": ",e),n("div",null,"Longitude: ",i))}_renderCursor(){const{view:{scale:t},_cursor:e}=this,{latitude:i,longitude:o}=this._formatters.coordinates(e);return n("div",{class:L.results,key:D++},n("div",null,n("calcite-dropdown",{afterCreate:this._renderUnitsDropDown.bind(this,"coordinates","Latitude")}),": ",i),n("div",null,"Longitude: ",o),n("hr",null),n("div",null,n("calcite-dropdown",{afterCreate:this._renderUnitsDropDown.bind(this,"elevation","Elevation")}),": ",this._formatters.elevation(e)),n("hr",null),n("div",null,"Scale: 1:",Number(t.toFixed(0)).toLocaleString()))}_renderElevation(){const{_state:{elevationGeometry:t}}=this;return n("div",{class:L.results,key:D++},n("div",null,n("calcite-dropdown",{afterCreate:this._renderUnitsDropDown.bind(this,"elevation","Elevation")}),": ",this._formatters.elevation(t)))}_renderLength(){const{_state:{lengthGeometry:t}}=this;return n("div",{class:L.results,key:D++},n("div",null,n("calcite-dropdown",{afterCreate:this._renderUnitsDropDown.bind(this,"length","Length")}),":"," ",this._formatters.length(t)))}_renderUnitsDropDown(t,e,i){const{_units:o}=this;new S({text:e,type:t,units:o,container:i})}};e([o({aliasOf:"view.map.ground"})],A.prototype,"_ground",void 0),e([o()],A.prototype,"_state",void 0),A=e([s("cov.components.Measure")],A);export default A;