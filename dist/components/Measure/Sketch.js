/* His name was Bruce McNair. Copyright 2025 City of Vernonia, Oregon. */
import{__awaiter as e,__decorate as t}from"tslib";import{whenOnce as i}from"@arcgis/core/core/reactiveUtils";import{subclass as o}from"@arcgis/core/core/accessorSupport/decorators";import r from"@arcgis/core/widgets/Sketch/SketchViewModel";import a from"@arcgis/core/views/interactive/snapping/SnappingOptions";import s from"@arcgis/core/views/interactive/snapping/FeatureSnappingLayerSource";import l from"@arcgis/core/layers/GroupLayer";import n from"@arcgis/core/layers/GraphicsLayer";import c from"@arcgis/core/Graphic";import{Point as p}from"@arcgis/core/geometry";import{CIMSymbol as y,SimpleMarkerSymbol as d,TextSymbol as h}from"@arcgis/core/symbols";import{APPLICATION_MEASURE_LAYER as m}from"../../support/layerUtils";const S={PRIMARY:[237,81,81],SECONDARY:[255,255,255]},f="sketch-custom-handles",g=[{type:"CIMSolidStroke",effects:[{type:"CIMGeometricEffectDashes",dashTemplate:[4.75,4.75],lineDashEnding:"HalfPattern",offsetAlongLine:0}],enable:!0,capStyle:"Butt",joinStyle:"Round",width:2.25,color:[...S.SECONDARY,255]},{type:"CIMSolidStroke",enable:!0,capStyle:"Butt",joinStyle:"Round",width:2.25,color:[...S.PRIMARY,255]}],b=new d({style:"circle",size:6,color:S.SECONDARY,outline:{width:1,color:S.PRIMARY}}),u=new y({data:{type:"CIMSymbolReference",symbol:{type:"CIMPolygonSymbol",symbolLayers:[{type:"CIMSolidFill",enable:!0,color:[...S.PRIMARY,32]},...g]}}}),w=new y({data:{type:"CIMSymbolReference",symbol:{type:"CIMLineSymbol",symbolLayers:g}}}),R=new a({enabled:!0,featureEnabled:!0,selfEnabled:!0}),v=new h({color:S.PRIMARY,haloColor:S.SECONDARY,haloSize:2,horizontalAlignment:"center",verticalAlignment:"middle",font:{size:10}});let M=class extends r{constructor(t){super(t),this.labels=new n,this.layer=new n,this.layers=new l({listMode:"hide"}),this.textSymbol=v,this.updateOnGraphicClick=!1,this._initialized=!1,this.activeFillSymbol=u,this.activeLineSymbol=w,this.activeVertexSymbol=b,this.pointSymbol=b,this.polygonSymbol=u,this.polylineSymbol=w,this.snappingOptions=R,this.vertexSymbol=b,this.layers.addMany([this.layer,this.labels]),i((()=>this.view)).then((t=>e(this,void 0,void 0,(function*(){yield t.when(),m?m.add(this.layers):t.map.add(this.layers);const e=t.map.layers;e.forEach(this._addSnappingLayer.bind(this)),this.addHandles(e.on("after-add",(e=>{this._addSnappingLayer(e.item)})),f)})))),this.addHandles(this.on("create",this._addVertices.bind(this)),f)}clearGraphics(e){const{labels:t,layer:i}=this;"all"!==e&&"labels"!==e||t.removeAll(),"all"!==e&&"geometry"!==e||i.removeAll()}_addSnappingLayer(e){const{snappingOptions:{featureSources:t}}=this,{listMode:i,title:o,type:r}=e;if("group"===r)return void e.layers.forEach(this._addSnappingLayer.bind(this));if(!0===e.internal)return;if("hide"===i||!o)return;if("graphics"!==r&&"csv"!==r&&"feature"!==r&&"geojson"!==r)return;const a=e;t.add(new s({layer:a}))}_addVertices(e){const{layer:t,pointSymbol:i,view:o}=this,{graphic:{geometry:r},state:a}=e;if(!o||!r||"complete"!==a||"polygon"!==r.type&&"polyline"!==r.type)return;const s="polyline"===r.type?r.paths[0]:r.rings[0];t.addMany(s.map((e=>{const[t,r]=e;return new c({geometry:new p({x:t,y:r,spatialReference:o.spatialReference}),symbol:i})})))}};M=t([o("cov.components.Measure.Sketch")],M);export default M;