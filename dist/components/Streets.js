/* His name was Bruce McNair. Copyright 2025 City of Vernonia, Oregon. */
import{__awaiter as e,__decorate as t}from"tslib";import{watch as i}from"@arcgis/core/core/reactiveUtils";import{property as r,subclass as l}from"@arcgis/core/core/accessorSupport/decorators";import a from"@arcgis/core/widgets/Widget";import{tsx as o}from"@arcgis/core/widgets/support/widget";import n from"@arcgis/core/layers/GraphicsLayer";import s from"@arcgis/core/Graphic";import c from"@arcgis/core/symbols/SimpleMarkerSymbol";import d from"@arcgis/core/geometry/Point";import u from"@arcgis/core/geometry/Polyline";import{load as h,isLoaded as p,execute as f}from"@arcgis/core/geometry/operators/projectOperator";import{getNearestCoordinate as y}from"@arcgis/core/geometry/operators/proximityOperator";import{execute as b}from"@arcgis/core/geometry/operators/lengthOperator";import{execute as m}from"@arcgis/core/geometry/operators/distanceOperator";import{execute as g}from"@arcgis/core/geometry/operators/containsOperator";const _="cov--streets",v={notice:`${_}_notice`,table:"esri-widget__table",tableBlock:`${_}_table-block`},w=[],S=[10,11,12,20,21,22],E=[1,2],I="highlight-handle",O="view-click-handle";let k=0;const C={1:"Poor",2:"Marginal",3:"Fair",4:"Good",5:"Excellent"},N={U:"UNIMPROVED (Open for Travel)",D:"GRADED & DRAINED (Natural Surface)",G:"GRADED AND DRAINED (Gravel)",O:"OIL MAT",A:"ASPHALT CONCRETE",N:"CONCRETE, BRICK, STONE",Z:"OTHER, UNKNOWN"},R={end:new c({color:"red",style:"square",size:10,outline:{color:"white",width:1}}),location:new c({color:"orange",style:"diamond",size:12,outline:{color:"white",width:1}}),start:new c({color:"green",style:"circle",size:11,outline:{color:"white",width:1}})};let D=class extends a{constructor(e){super(e),this._featureInfo=null,this._graphics=new n({listMode:"hide"}),this._legendIndex=10,this._viewState="home"}postInitialize(){return e(this,void 0,void 0,function*(){var e;const{centerlines:t,streets:r,streetsInfo:l,view:a,_graphics:o}=this;null===(e=a.map)||void 0===e||e.add(o),this._centerlinesView=yield a.whenLayerView(t),this._centerlinesView.highlightOptions={fillOpacity:.1,haloOpacity:.5},yield l.load();(yield(yield fetch(`${l.url}/legend?f=json`)).json()).layers.forEach(e=>{const{layerId:t,legend:i}=e;-1!==S.indexOf(t)&&(w[t]=i)});const n=i(()=>this.visible,e=>{r.visible=e,e?(a.closePopup(),this.addHandles(a.on("click",this._viewClick.bind(this)),O)):(this.removeHandles(O),this._reset())});this.addHandles([n]),p()||(yield h())})}_viewClick(t){return e(this,void 0,void 0,function*(){const{centerlines:e,view:i,_centerlinesView:r,_graphics:l,_ground:a}=this;t.stopPropagation(),this.removeHandles(I),l.removeAll();try{const o=(yield r.queryFeatures({geometry:t.mapPoint,distance:3*i.resolution,outFields:["*"]})).features[0];if(!o)return void this._reset();if(this.addHandles(r.highlight(o),I),"City of Vernonia"!==o.attributes.OWNER)return this._featureInfo={feature:o,networkData:[],m:0,z:0},void(this._viewState="feature");const n=o.attributes[e.objectIdField],c=yield Promise.all([e.queryRelatedFeatures({relationshipId:0,objectIds:[n],outFields:["*"],orderByFields:["BEG_M ASC"]}),e.queryRelatedFeatures({relationshipId:2,objectIds:[n],outFields:["*"],orderByFields:["BEG_M ASC"]}),e.queryRelatedFeatures({relationshipId:1,objectIds:[n],outFields:["*"],orderByFields:["BEG_M ASC"]})]),h=(yield e.queryFeatures({objectIds:[o.attributes[e.objectIdField]],returnGeometry:!0,returnM:!0})).features[0].geometry,p=y(h,f(t.mapPoint,e.spatialReference)).coordinate;let _=h.paths[0][0][2]||0,v=0;h.paths[0].forEach((e,t,i)=>{const r=i[t],l=i[t+1];if(v>0)return;if(!r||!l)return;const a=new u({paths:[[r,l]],spatialReference:h.spatialReference});g(a,p)?(_+=m(p,new d({x:r[0],y:r[1],spatialReference:h.spatialReference})),v=t):_+=b(a,{unit:"feet"})});const w=(yield a.queryElevation(p)).geometry,S=w.z?3.281*w.z:0;l.addMany([new s({geometry:f(p,i.spatialReference),symbol:R.location.clone()}),new s({geometry:f(new d({x:h.paths[0][0][0],y:h.paths[0][0][1],spatialReference:h.spatialReference}),i.spatialReference),symbol:R.start.clone()}),new s({geometry:f(new d({x:h.paths[0][h.paths[0].length-1][0],y:h.paths[0][h.paths[0].length-1][1],spatialReference:h.spatialReference}),i.spatialReference),symbol:R.end.clone()})]),this._featureInfo={feature:o,networkData:c,m:Number(_.toFixed(2)),z:Number(S.toFixed(2))},i.goTo(h),this._viewState="feature"}catch(e){console.log(e)}})}_reset(){const{_graphics:e}=this;e.removeAll(),this.removeHandles(I),this._viewState="home",this._featureInfo=null}render(){const{_featureInfo:e,_legendIndex:t,_viewState:i}=this,r=e?e.feature.attributes.LABEL||`Unnamed (${e.feature.attributes.FUNC_CLASS})`:"Streets";return o("calcite-panel",{class:_,heading:r},o("div",{hidden:"home"!==i},o("calcite-block",{collapsible:!0,heading:"Data display",expanded:!0},o("calcite-label",null,o("calcite-select",{afterCreate:this._dataDisplaySelectAfterCreate.bind(this)},o("calcite-option",{selected:!0,value:10},"Functional classification"),o("calcite-option",{value:12},"Ownership"),o("calcite-option",{value:21},"Surface material"),o("calcite-option",{value:20},"Surface condition"),o("calcite-option",{value:22},"Surface width"),o("calcite-option",{value:11},"ODOT reported"))),this._renderLegend(t)),o("calcite-block",{collapsible:!0,heading:"Linear referencing"},o("calcite-label",{layout:"inline"},o("calcite-switch",{afterCreate:this._directionalArrowsSwitchAfterCreate.bind(this)}),"Directional arrows"),o("calcite-label",{layout:"inline"},o("calcite-switch",{afterCreate:this._stationingSwitchAfterCreate.bind(this)}),"Stationing"))),this._renderFeature())}_dataDisplaySelectAfterCreate(e){e.addEventListener("calciteSelectChange",()=>{const{streetsInfo:t}=this,i=e.selectedOption.value;S.forEach(e=>{if(i===e){const i=t.findSublayerById(e);i&&(i.visible=!0)}else{const i=t.findSublayerById(e);i&&(i.visible=!1)}}),this._legendIndex=i})}_directionalArrowsSwitchAfterCreate(e){const{streetsInfo:t}=this;e.addEventListener("calciteSwitchChange",()=>{const i=t.findSublayerById(3);i&&(i.visible=e.checked)})}_renderFeature(){const{centerlines:e,_featureInfo:t}=this;if(!t)return o("div",null);const{feature:i,m:r,networkData:l,z:a}=t,{attributes:{FUNC_CLASS:n,OWNER:s,MAINTAINER:c,ODOT_REPORT:d,VERNONIA:u}}=i;if(0===u)return o("div",{class:v.notice,key:k++},o("calcite-notice",{icon:"information",open:!0,scale:"s"},o("div",{slot:"message"},"Selected asset is not in Vernonia city limits. Asset data is not available.")));if(1===u&&"City of Vernonia"!==s)return[o("div",{class:v.notice,key:k++},o("calcite-notice",{icon:"information",open:!0,scale:"s"},o("div",{slot:"message"},"Selected asset is not owned by the City. Extended asset data is not available."))),o("calcite-block",{class:v.tableBlock,key:k++,open:!0},o("table",{class:v.table},o("tr",null,o("th",null,"Classification"),o("td",null,n)),o("tr",null,o("th",null,"Owner"),o("td",null,s)),o("tr",null,o("th",null,"ODOT reported"),o("td",null,1===d?"Yes":"No"))))];const h=i.attributes[e.objectIdField];let p=0,f="",y="";const b=l[0][h].features.map(e=>{const{BEG_M:t,END_M:i,Width:l}=e.attributes;return e.attributes.BEG_M<r&&e.attributes.END_M>r&&(p=l),o("tr",{key:k++},o("th",null,t," - ",i),o("td",null,l,"'"))}),m=l[1][h].features.map(e=>{const{BEG_M:t,END_M:i,SURF_TYPE:l}=e.attributes;return e.attributes.BEG_M<r&&e.attributes.END_M>r&&(f=N[l]),o("tr",{key:k++},o("th",null,t," - ",i),o("td",null,N[l]))}),g=l[2][h].features.map(e=>{const{BEG_M:t,END_M:i,SURF_CONDITION:l}=e.attributes;return e.attributes.BEG_M<r&&e.attributes.END_M>r&&(y=C[l]),o("tr",{key:k++},o("th",null,t," - ",i),o("td",null,C[l]))});return[o("calcite-block",{class:v.tableBlock,key:k++,open:!0},o("table",{class:v.table},o("tr",null,o("th",null,"Classification"),o("td",null,n)),o("tr",null,o("th",null,"Owner"),o("td",null,s)),o("tr",null,o("th",null,"Maintainer"),o("td",null,c)),o("tr",null,o("th",null,"ODOT reported"),o("td",null,1===d?"Yes":"No")),o("tr",null,o("th",null,"Station (m)"),o("td",null,r)),o("tr",null,o("th",null,"Elevation"),o("td",null,a,"'")),o("tr",null,o("th",null,"Surface type"),o("td",null,f)),o("tr",null,o("th",null,"Surface condition"),o("td",null,y)),o("tr",null,o("th",null,"Surface width"),o("td",null,p)))),o("calcite-block",{class:v.tableBlock,collapsible:!0,heading:"Surface type",key:k++},o("table",{class:v.table},m)),o("calcite-block",{class:v.tableBlock,collapsible:!0,heading:"Surface condition",key:k++},o("table",{class:v.table},g)),o("calcite-block",{class:v.tableBlock,collapsible:!0,heading:"Surface width",key:k++},o("table",{class:v.table},b))]}_renderLegend(e){const t=w[e];return t?o("table",null,t.map(e=>{const{contentType:t,imageData:i,label:r}=e;return o("tr",{key:k++},o("td",null,o("img",{src:`data:${t};base64,${i}`})),o("td",null,r))})):(setTimeout(this._renderLegend.bind(this,e),250),null)}_stationingSwitchAfterCreate(e){const{streetsInfo:t}=this;e.addEventListener("calciteSwitchChange",()=>{E.forEach(i=>{const r=t.findSublayerById(i);r&&(r.visible=e.checked)})})}};t([r()],D.prototype,"_featureInfo",void 0),t([r({aliasOf:"view.map.ground"})],D.prototype,"_ground",void 0),t([r()],D.prototype,"_legendIndex",void 0),t([r()],D.prototype,"_viewState",void 0),D=t([l("cov.components.Streets")],D);export default D;